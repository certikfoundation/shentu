syntax = "proto3";
package shentu.nft.v1alpha1;

import "gogoproto/gogo.proto";
import "irismod/nft/tx.proto";

option go_package = "github.com/certikfoundation/shentu/x/nft/types";

option (gogoproto.stable_marshaler_all) = true;

// Msg defines the nft Msg service.
service Msg {
  // IssueDenom defines a method for issue a denom.
  rpc IssueDenom(irismod.nft.MsgIssueDenom) returns (irismod.nft.MsgIssueDenomResponse);

  // MintNFT defines a method for mint a new nft
  rpc MintNFT(irismod.nft.MsgMintNFT) returns (irismod.nft.MsgMintNFTResponse);

  // RefundHTLC defines a method for editing a nft.
  rpc EditNFT(irismod.nft.MsgEditNFT) returns (irismod.nft.MsgEditNFTResponse);

  // TransferNFT defines a method for transferring a nft.
  rpc TransferNFT(irismod.nft.MsgTransferNFT) returns (irismod.nft.MsgTransferNFTResponse);

  // BurnNFT defines a method for burning a nft.
  rpc BurnNFT(irismod.nft.MsgBurnNFT) returns (irismod.nft.MsgBurnNFTResponse);

  // CreateNFTAdmin defines a method for creating an nft admin.
  rpc CreateAdmin(MsgCreateAdmin) returns (MsgIssueAdminResponse);

  // RevokeNFTAdmin defines a method for revoking an nft admin.
  rpc RevokeAdmin(MsgRevokeAdmin) returns (MsgRevokeAdminResponse);

  // IssueCertificate defines a method for issuing a certificate.
  rpc IssueCertificate(MsgIssueCertificate) returns (MsgIssueCertificateResponse);

  // RevokeCertificate defines a method for revoking a certificate.
  rpc RevokeCertificate(MsgRevokeCertificate) returns (MsgRevokeCertificateResponse);
}

// MsgCreateAdmin is the message for creating an nft admin.
message MsgCreateAdmin {
  string creator = 1;
  string address = 2;
}

message MsgIssueAdminResponse {}

// MsgRevokeAdmin is the message for revoking an nft admin.
message MsgRevokeAdmin {
  string revoker = 1;
  string address = 2;
}

message MsgRevokeAdminResponse {}

// MsgIssueCertificates is the message for issuing a certificate.
message MsgIssueCertificate {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string denom_id = 1;
  string token_id = 2;
  string name = 3;
  string uri = 4;
  string content = 5;
  string description = 6;
  string certifier = 7;
}

message MsgIssueCertificateResponse {}

// MsgEditCertificate is the message for editing an existing certificate.
message MsgEditCertificate {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string denom_id = 1;
  string token_id = 2;
  string name = 3;
  string uri = 4;
  string content = 5;
  string description = 6;
  string owner = 7;
}

message MsgEditCertificateResponse {}

// MsgRevokeCertificate returns a certificate revoking operation.
message MsgRevokeCertificate {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string denom_id = 1;
  string token_id = 2;
  string revoker = 3;
  string description = 4;
}

message MsgRevokeCertificateResponse {}