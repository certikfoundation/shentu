// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/nft/v1alpha1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/irisnet/irismod/modules/nft/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateAdmin struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgCreateAdmin) Reset()         { *m = MsgCreateAdmin{} }
func (m *MsgCreateAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAdmin) ProtoMessage()    {}
func (*MsgCreateAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cb0e86de90ef9e6, []int{0}
}
func (m *MsgCreateAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgCreateAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAdmin.Merge(m, src)
}
func (m *MsgCreateAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAdmin proto.InternalMessageInfo

func (m *MsgCreateAdmin) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateAdmin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgIssueAdminResponse struct {
}

func (m *MsgIssueAdminResponse) Reset()         { *m = MsgIssueAdminResponse{} }
func (m *MsgIssueAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueAdminResponse) ProtoMessage()    {}
func (*MsgIssueAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cb0e86de90ef9e6, []int{1}
}
func (m *MsgIssueAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgIssueAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueAdminResponse.Merge(m, src)
}
func (m *MsgIssueAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueAdminResponse proto.InternalMessageInfo

type MsgRevokeAdmin struct {
	Revoker string `protobuf:"bytes,1,opt,name=revoker,proto3" json:"revoker,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgRevokeAdmin) Reset()         { *m = MsgRevokeAdmin{} }
func (m *MsgRevokeAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeAdmin) ProtoMessage()    {}
func (*MsgRevokeAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cb0e86de90ef9e6, []int{2}
}
func (m *MsgRevokeAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgRevokeAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeAdmin.Merge(m, src)
}
func (m *MsgRevokeAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeAdmin proto.InternalMessageInfo

func (m *MsgRevokeAdmin) GetRevoker() string {
	if m != nil {
		return m.Revoker
	}
	return ""
}

func (m *MsgRevokeAdmin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgRevokeAdminResponse struct {
}

func (m *MsgRevokeAdminResponse) Reset()         { *m = MsgRevokeAdminResponse{} }
func (m *MsgRevokeAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeAdminResponse) ProtoMessage()    {}
func (*MsgRevokeAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cb0e86de90ef9e6, []int{3}
}
func (m *MsgRevokeAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgRevokeAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeAdminResponse.Merge(m, src)
}
func (m *MsgRevokeAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeAdminResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateAdmin)(nil), "shentu.nft.v1alpha1.MsgCreateAdmin")
	proto.RegisterType((*MsgIssueAdminResponse)(nil), "shentu.nft.v1alpha1.MsgIssueAdminResponse")
	proto.RegisterType((*MsgRevokeAdmin)(nil), "shentu.nft.v1alpha1.MsgRevokeAdmin")
	proto.RegisterType((*MsgRevokeAdminResponse)(nil), "shentu.nft.v1alpha1.MsgRevokeAdminResponse")
}

func init() { proto.RegisterFile("shentu/nft/v1alpha1/tx.proto", fileDescriptor_6cb0e86de90ef9e6) }

var fileDescriptor_6cb0e86de90ef9e6 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6a, 0xe2, 0x40,
	0x1c, 0xc7, 0xcd, 0xee, 0xb2, 0xb2, 0x23, 0xec, 0x21, 0xeb, 0xae, 0x61, 0x76, 0xc9, 0x16, 0xbd,
	0x94, 0x16, 0x26, 0xd8, 0x3e, 0x41, 0xd5, 0x16, 0x0a, 0xa6, 0x05, 0xf1, 0xd4, 0x43, 0x4b, 0x34,
	0x93, 0x38, 0xd8, 0xcc, 0x84, 0x99, 0x89, 0xd8, 0xb7, 0xe8, 0xc3, 0xf4, 0x21, 0x7a, 0xf4, 0xe8,
	0xb1, 0xc4, 0x17, 0x29, 0x49, 0x26, 0x36, 0xfe, 0x89, 0xf4, 0xe6, 0x8f, 0xcf, 0x97, 0xcf, 0xfc,
	0x0c, 0xdf, 0x1f, 0xf8, 0x27, 0x26, 0x98, 0xca, 0xc8, 0xa2, 0x9e, 0xb4, 0x66, 0x6d, 0xe7, 0x31,
	0x9c, 0x38, 0x6d, 0x4b, 0xce, 0x51, 0xc8, 0x99, 0x64, 0xfa, 0xaf, 0x8c, 0x22, 0xea, 0x49, 0x94,
	0x53, 0x58, 0xf7, 0x99, 0xcf, 0x52, 0x6e, 0x25, 0xbf, 0xb2, 0x28, 0xac, 0x13, 0x4e, 0x44, 0xc0,
	0xdc, 0xd4, 0x94, 0x0b, 0x9a, 0x3d, 0xf0, 0xd3, 0x16, 0x7e, 0x97, 0x63, 0x47, 0xe2, 0x0b, 0x37,
	0x20, 0x54, 0x37, 0x40, 0x75, 0x9c, 0x8c, 0x8c, 0x1b, 0xda, 0x91, 0x76, 0xfc, 0x63, 0x90, 0x8f,
	0x09, 0x71, 0x5c, 0x97, 0x63, 0x21, 0x8c, 0x2f, 0x19, 0x51, 0x63, 0xb3, 0x01, 0x7e, 0xdb, 0xc2,
	0xbf, 0x16, 0x22, 0xca, 0x24, 0x03, 0x2c, 0x42, 0x46, 0x05, 0x56, 0xfa, 0x01, 0x9e, 0xb1, 0xe9,
	0x87, 0x9e, 0xa7, 0xe3, 0x5a, 0xaf, 0xc6, 0x03, 0x7a, 0x03, 0xfc, 0xd9, 0xb4, 0xe4, 0xfe, 0xb3,
	0x97, 0x6f, 0xe0, 0xab, 0x2d, 0x7c, 0xbd, 0x0f, 0x40, 0xfa, 0x7a, 0x0f, 0x53, 0x16, 0xe8, 0x10,
	0xa9, 0xff, 0x9a, 0x7e, 0x97, 0x7c, 0xb3, 0x94, 0xc1, 0x66, 0x39, 0xcb, 0xad, 0x7a, 0x17, 0x54,
	0x6d, 0x42, 0xe5, 0xcd, 0xd5, 0x50, 0x6f, 0x6c, 0xc7, 0x15, 0x80, 0xff, 0x4b, 0x40, 0x51, 0x72,
	0xe9, 0x92, 0xfd, 0x12, 0x05, 0x76, 0x25, 0x0a, 0xac, 0x25, 0xb7, 0xa0, 0x36, 0xe4, 0x0e, 0x15,
	0x1e, 0xe6, 0x89, 0xe8, 0xef, 0x76, 0xbe, 0x00, 0x61, 0xeb, 0x00, 0x2c, 0x6e, 0xd5, 0x89, 0x38,
	0xdd, 0xbb, 0x95, 0x02, 0xbb, 0x5b, 0x29, 0xb0, 0x96, 0xdc, 0x83, 0x5a, 0xb1, 0x31, 0x2d, 0xb4,
	0xa7, 0x85, 0x68, 0xb3, 0x56, 0xf0, 0xa4, 0x2c, 0xb4, 0xdb, 0x1a, 0xfd, 0x01, 0xd4, 0x8a, 0x95,
	0x29, 0xf5, 0x17, 0x42, 0xf0, 0xf4, 0x13, 0xa1, 0xfc, 0x81, 0x4e, 0xff, 0x35, 0x36, 0xb5, 0x45,
	0x6c, 0x6a, 0xcb, 0xd8, 0xd4, 0xde, 0x62, 0x53, 0x7b, 0x5e, 0x99, 0x95, 0xc5, 0xca, 0xac, 0x2c,
	0x57, 0x66, 0xe5, 0x0e, 0xf9, 0x44, 0x4e, 0xa2, 0x11, 0x1a, 0xb3, 0xc0, 0x1a, 0x63, 0x2e, 0xc9,
	0xd4, 0x63, 0x11, 0x75, 0x1d, 0x49, 0x18, 0xb5, 0xd4, 0x39, 0xce, 0xb3, 0x33, 0x7a, 0x0a, 0xb1,
	0x18, 0x7d, 0x4f, 0x4f, 0xe9, 0xfc, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x58, 0xc4, 0xb3, 0xab,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IssueDenom defines a method for issue a denom.
	IssueDenom(ctx context.Context, in *types.MsgIssueDenom, opts ...grpc.CallOption) (*types.MsgIssueDenomResponse, error)
	// MintNFT defines a method for mint a new nft
	MintNFT(ctx context.Context, in *types.MsgMintNFT, opts ...grpc.CallOption) (*types.MsgMintNFTResponse, error)
	// RefundHTLC defines a method for editing a nft.
	EditNFT(ctx context.Context, in *types.MsgEditNFT, opts ...grpc.CallOption) (*types.MsgEditNFTResponse, error)
	// TransferNFT defines a method for transferring a nft.
	TransferNFT(ctx context.Context, in *types.MsgTransferNFT, opts ...grpc.CallOption) (*types.MsgTransferNFTResponse, error)
	// BurnNFT defines a method for burning a nft.
	BurnNFT(ctx context.Context, in *types.MsgBurnNFT, opts ...grpc.CallOption) (*types.MsgBurnNFTResponse, error)
	// CreateNFTAdmin defines a method for creating an nft admin.
	CreateAdmin(ctx context.Context, in *MsgCreateAdmin, opts ...grpc.CallOption) (*MsgIssueAdminResponse, error)
	// RevokeNFTAdmin defines a method for revoking an nft admin.
	RevokeAdmin(ctx context.Context, in *MsgRevokeAdmin, opts ...grpc.CallOption) (*MsgRevokeAdminResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IssueDenom(ctx context.Context, in *types.MsgIssueDenom, opts ...grpc.CallOption) (*types.MsgIssueDenomResponse, error) {
	out := new(types.MsgIssueDenomResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/IssueDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintNFT(ctx context.Context, in *types.MsgMintNFT, opts ...grpc.CallOption) (*types.MsgMintNFTResponse, error) {
	out := new(types.MsgMintNFTResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/MintNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditNFT(ctx context.Context, in *types.MsgEditNFT, opts ...grpc.CallOption) (*types.MsgEditNFTResponse, error) {
	out := new(types.MsgEditNFTResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/EditNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferNFT(ctx context.Context, in *types.MsgTransferNFT, opts ...grpc.CallOption) (*types.MsgTransferNFTResponse, error) {
	out := new(types.MsgTransferNFTResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/TransferNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnNFT(ctx context.Context, in *types.MsgBurnNFT, opts ...grpc.CallOption) (*types.MsgBurnNFTResponse, error) {
	out := new(types.MsgBurnNFTResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/BurnNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAdmin(ctx context.Context, in *MsgCreateAdmin, opts ...grpc.CallOption) (*MsgIssueAdminResponse, error) {
	out := new(MsgIssueAdminResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeAdmin(ctx context.Context, in *MsgRevokeAdmin, opts ...grpc.CallOption) (*MsgRevokeAdminResponse, error) {
	out := new(MsgRevokeAdminResponse)
	err := c.cc.Invoke(ctx, "/shentu.nft.v1alpha1.Msg/RevokeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IssueDenom defines a method for issue a denom.
	IssueDenom(context.Context, *types.MsgIssueDenom) (*types.MsgIssueDenomResponse, error)
	// MintNFT defines a method for mint a new nft
	MintNFT(context.Context, *types.MsgMintNFT) (*types.MsgMintNFTResponse, error)
	// RefundHTLC defines a method for editing a nft.
	EditNFT(context.Context, *types.MsgEditNFT) (*types.MsgEditNFTResponse, error)
	// TransferNFT defines a method for transferring a nft.
	TransferNFT(context.Context, *types.MsgTransferNFT) (*types.MsgTransferNFTResponse, error)
	// BurnNFT defines a method for burning a nft.
	BurnNFT(context.Context, *types.MsgBurnNFT) (*types.MsgBurnNFTResponse, error)
	// CreateNFTAdmin defines a method for creating an nft admin.
	CreateAdmin(context.Context, *MsgCreateAdmin) (*MsgIssueAdminResponse, error)
	// RevokeNFTAdmin defines a method for revoking an nft admin.
	RevokeAdmin(context.Context, *MsgRevokeAdmin) (*MsgRevokeAdminResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IssueDenom(ctx context.Context, req *types.MsgIssueDenom) (*types.MsgIssueDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueDenom not implemented")
}
func (*UnimplementedMsgServer) MintNFT(ctx context.Context, req *types.MsgMintNFT) (*types.MsgMintNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintNFT not implemented")
}
func (*UnimplementedMsgServer) EditNFT(ctx context.Context, req *types.MsgEditNFT) (*types.MsgEditNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditNFT not implemented")
}
func (*UnimplementedMsgServer) TransferNFT(ctx context.Context, req *types.MsgTransferNFT) (*types.MsgTransferNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferNFT not implemented")
}
func (*UnimplementedMsgServer) BurnNFT(ctx context.Context, req *types.MsgBurnNFT) (*types.MsgBurnNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnNFT not implemented")
}
func (*UnimplementedMsgServer) CreateAdmin(ctx context.Context, req *MsgCreateAdmin) (*MsgIssueAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (*UnimplementedMsgServer) RevokeAdmin(ctx context.Context, req *MsgRevokeAdmin) (*MsgRevokeAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAdmin not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IssueDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgIssueDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/IssueDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueDenom(ctx, req.(*types.MsgIssueDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgMintNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/MintNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintNFT(ctx, req.(*types.MsgMintNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgEditNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/EditNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditNFT(ctx, req.(*types.MsgEditNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgTransferNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/TransferNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferNFT(ctx, req.(*types.MsgTransferNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgBurnNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/BurnNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnNFT(ctx, req.(*types.MsgBurnNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAdmin(ctx, req.(*MsgCreateAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.nft.v1alpha1.Msg/RevokeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeAdmin(ctx, req.(*MsgRevokeAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.nft.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueDenom",
			Handler:    _Msg_IssueDenom_Handler,
		},
		{
			MethodName: "MintNFT",
			Handler:    _Msg_MintNFT_Handler,
		},
		{
			MethodName: "EditNFT",
			Handler:    _Msg_EditNFT_Handler,
		},
		{
			MethodName: "TransferNFT",
			Handler:    _Msg_TransferNFT_Handler,
		},
		{
			MethodName: "BurnNFT",
			Handler:    _Msg_BurnNFT_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _Msg_CreateAdmin_Handler,
		},
		{
			MethodName: "RevokeAdmin",
			Handler:    _Msg_RevokeAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/nft/v1alpha1/tx.proto",
}

func (m *MsgCreateAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Revoker) > 0 {
		i -= len(m.Revoker)
		copy(dAtA[i:], m.Revoker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Revoker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Revoker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revoker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
