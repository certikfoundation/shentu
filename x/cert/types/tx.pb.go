// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/cert/v1alpha1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgProposeCertifier is the message for proposing new certifier.
type MsgProposeCertifier struct {
	Proposer    string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	Alias       string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty" yaml:"alias"`
	Certifier   string `protobuf:"bytes,3,opt,name=certifier,proto3" json:"certifier,omitempty" yaml:"certifier"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *MsgProposeCertifier) Reset()         { *m = MsgProposeCertifier{} }
func (m *MsgProposeCertifier) String() string { return proto.CompactTextString(m) }
func (*MsgProposeCertifier) ProtoMessage()    {}
func (*MsgProposeCertifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{0}
}
func (m *MsgProposeCertifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeCertifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeCertifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeCertifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeCertifier.Merge(m, src)
}
func (m *MsgProposeCertifier) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeCertifier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeCertifier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeCertifier proto.InternalMessageInfo

type MsgProposeCertifierResponse struct {
}

func (m *MsgProposeCertifierResponse) Reset()         { *m = MsgProposeCertifierResponse{} }
func (m *MsgProposeCertifierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeCertifierResponse) ProtoMessage()    {}
func (*MsgProposeCertifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{1}
}
func (m *MsgProposeCertifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeCertifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeCertifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeCertifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeCertifierResponse.Merge(m, src)
}
func (m *MsgProposeCertifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeCertifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeCertifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeCertifierResponse proto.InternalMessageInfo

// MsgCertifyValidator is the message for certifying a validator node.
type MsgCertifyValidator struct {
	Certifier string     `protobuf:"bytes,1,opt,name=certifier,proto3" json:"certifier,omitempty" yaml:"certifier"`
	Pubkey    *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgCertifyValidator) Reset()         { *m = MsgCertifyValidator{} }
func (m *MsgCertifyValidator) String() string { return proto.CompactTextString(m) }
func (*MsgCertifyValidator) ProtoMessage()    {}
func (*MsgCertifyValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{2}
}
func (m *MsgCertifyValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCertifyValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCertifyValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCertifyValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCertifyValidator.Merge(m, src)
}
func (m *MsgCertifyValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgCertifyValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCertifyValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCertifyValidator proto.InternalMessageInfo

type MsgCertifyValidatorResponse struct {
}

func (m *MsgCertifyValidatorResponse) Reset()         { *m = MsgCertifyValidatorResponse{} }
func (m *MsgCertifyValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCertifyValidatorResponse) ProtoMessage()    {}
func (*MsgCertifyValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{3}
}
func (m *MsgCertifyValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCertifyValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCertifyValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCertifyValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCertifyValidatorResponse.Merge(m, src)
}
func (m *MsgCertifyValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCertifyValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCertifyValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCertifyValidatorResponse proto.InternalMessageInfo

// MsgDecertifyValidator is the message for de-certifying a validator node.
type MsgDecertifyValidator struct {
	Decertifier string     `protobuf:"bytes,1,opt,name=decertifier,proto3" json:"decertifier,omitempty" yaml:"decertifier"`
	Pubkey      *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgDecertifyValidator) Reset()         { *m = MsgDecertifyValidator{} }
func (m *MsgDecertifyValidator) String() string { return proto.CompactTextString(m) }
func (*MsgDecertifyValidator) ProtoMessage()    {}
func (*MsgDecertifyValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{4}
}
func (m *MsgDecertifyValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecertifyValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecertifyValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecertifyValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecertifyValidator.Merge(m, src)
}
func (m *MsgDecertifyValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecertifyValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecertifyValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecertifyValidator proto.InternalMessageInfo

type MsgDecertifyValidatorResponse struct {
}

func (m *MsgDecertifyValidatorResponse) Reset()         { *m = MsgDecertifyValidatorResponse{} }
func (m *MsgDecertifyValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDecertifyValidatorResponse) ProtoMessage()    {}
func (*MsgDecertifyValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{5}
}
func (m *MsgDecertifyValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecertifyValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecertifyValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecertifyValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecertifyValidatorResponse.Merge(m, src)
}
func (m *MsgDecertifyValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecertifyValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecertifyValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecertifyValidatorResponse proto.InternalMessageInfo

// MsgCertifyGeneral is the message for issuing a general certificate.
type MsgIssueCertificate struct {
	Content      *types.Any `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Compiler     string     `protobuf:"bytes,2,opt,name=compiler,proto3" json:"compiler,omitempty" yaml:"compiler"`
	BytecodeHash string     `protobuf:"bytes,3,opt,name=bytecode_hash,json=bytecodeHash,proto3" json:"bytecode_hash,omitempty" yaml:"bytecodehash"`
	Description  string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Certifier    string     `protobuf:"bytes,5,opt,name=certifier,proto3" json:"certifier,omitempty" yaml:"certifier"`
}

func (m *MsgIssueCertificate) Reset()         { *m = MsgIssueCertificate{} }
func (m *MsgIssueCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCertificate) ProtoMessage()    {}
func (*MsgIssueCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{6}
}
func (m *MsgIssueCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCertificate.Merge(m, src)
}
func (m *MsgIssueCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCertificate proto.InternalMessageInfo

type MsgIssueCertificateResponse struct {
}

func (m *MsgIssueCertificateResponse) Reset()         { *m = MsgIssueCertificateResponse{} }
func (m *MsgIssueCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCertificateResponse) ProtoMessage()    {}
func (*MsgIssueCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{7}
}
func (m *MsgIssueCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCertificateResponse.Merge(m, src)
}
func (m *MsgIssueCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCertificateResponse proto.InternalMessageInfo

// MsgRevokeCertificate returns a certificate revoking operation.
type MsgRevokeCertificate struct {
	Revoker     string `protobuf:"bytes,1,opt,name=revoker,proto3" json:"revoker,omitempty" yaml:"revoker"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *MsgRevokeCertificate) Reset()         { *m = MsgRevokeCertificate{} }
func (m *MsgRevokeCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCertificate) ProtoMessage()    {}
func (*MsgRevokeCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{8}
}
func (m *MsgRevokeCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCertificate.Merge(m, src)
}
func (m *MsgRevokeCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCertificate proto.InternalMessageInfo

type MsgRevokeCertificateResponse struct {
}

func (m *MsgRevokeCertificateResponse) Reset()         { *m = MsgRevokeCertificateResponse{} }
func (m *MsgRevokeCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCertificateResponse) ProtoMessage()    {}
func (*MsgRevokeCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{9}
}
func (m *MsgRevokeCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCertificateResponse.Merge(m, src)
}
func (m *MsgRevokeCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCertificateResponse proto.InternalMessageInfo

// MsgCertifyPlatform is the message for certifying a validator's host platform.
type MsgCertifyPlatform struct {
	Certifier       string     `protobuf:"bytes,1,opt,name=certifier,proto3" json:"certifier,omitempty" yaml:"certifier"`
	ValidatorPubkey *types.Any `protobuf:"bytes,2,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
	Platform        string     `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty" yaml:"platform"`
}

func (m *MsgCertifyPlatform) Reset()         { *m = MsgCertifyPlatform{} }
func (m *MsgCertifyPlatform) String() string { return proto.CompactTextString(m) }
func (*MsgCertifyPlatform) ProtoMessage()    {}
func (*MsgCertifyPlatform) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{10}
}
func (m *MsgCertifyPlatform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCertifyPlatform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCertifyPlatform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCertifyPlatform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCertifyPlatform.Merge(m, src)
}
func (m *MsgCertifyPlatform) XXX_Size() int {
	return m.Size()
}
func (m *MsgCertifyPlatform) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCertifyPlatform.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCertifyPlatform proto.InternalMessageInfo

type MsgCertifyPlatformResponse struct {
}

func (m *MsgCertifyPlatformResponse) Reset()         { *m = MsgCertifyPlatformResponse{} }
func (m *MsgCertifyPlatformResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCertifyPlatformResponse) ProtoMessage()    {}
func (*MsgCertifyPlatformResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52586cc907ff884, []int{11}
}
func (m *MsgCertifyPlatformResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCertifyPlatformResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCertifyPlatformResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCertifyPlatformResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCertifyPlatformResponse.Merge(m, src)
}
func (m *MsgCertifyPlatformResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCertifyPlatformResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCertifyPlatformResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCertifyPlatformResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgProposeCertifier)(nil), "shentu.cert.v1alpha1.MsgProposeCertifier")
	proto.RegisterType((*MsgProposeCertifierResponse)(nil), "shentu.cert.v1alpha1.MsgProposeCertifierResponse")
	proto.RegisterType((*MsgCertifyValidator)(nil), "shentu.cert.v1alpha1.MsgCertifyValidator")
	proto.RegisterType((*MsgCertifyValidatorResponse)(nil), "shentu.cert.v1alpha1.MsgCertifyValidatorResponse")
	proto.RegisterType((*MsgDecertifyValidator)(nil), "shentu.cert.v1alpha1.MsgDecertifyValidator")
	proto.RegisterType((*MsgDecertifyValidatorResponse)(nil), "shentu.cert.v1alpha1.MsgDecertifyValidatorResponse")
	proto.RegisterType((*MsgIssueCertificate)(nil), "shentu.cert.v1alpha1.MsgIssueCertificate")
	proto.RegisterType((*MsgIssueCertificateResponse)(nil), "shentu.cert.v1alpha1.MsgIssueCertificateResponse")
	proto.RegisterType((*MsgRevokeCertificate)(nil), "shentu.cert.v1alpha1.MsgRevokeCertificate")
	proto.RegisterType((*MsgRevokeCertificateResponse)(nil), "shentu.cert.v1alpha1.MsgRevokeCertificateResponse")
	proto.RegisterType((*MsgCertifyPlatform)(nil), "shentu.cert.v1alpha1.MsgCertifyPlatform")
	proto.RegisterType((*MsgCertifyPlatformResponse)(nil), "shentu.cert.v1alpha1.MsgCertifyPlatformResponse")
}

func init() { proto.RegisterFile("shentu/cert/v1alpha1/tx.proto", fileDescriptor_c52586cc907ff884) }

var fileDescriptor_c52586cc907ff884 = []byte{
	// 790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0xd3, 0xff, 0x69, 0x7b, 0x9b, 0x3b, 0xcd, 0xbd, 0x84, 0xd0, 0xc4, 0xc8, 0x0b, 0x54,
	0x7e, 0x6a, 0xd3, 0x74, 0x83, 0x0a, 0x1b, 0x52, 0x84, 0xa8, 0x50, 0xa4, 0xc8, 0x0b, 0x24, 0xd8,
	0x54, 0x8e, 0x33, 0x71, 0xac, 0x26, 0x1e, 0xcb, 0x33, 0x89, 0xea, 0x37, 0x60, 0xc9, 0x9e, 0x4d,
	0x25, 0x16, 0xbc, 0x40, 0x25, 0xc4, 0x1b, 0xa0, 0xae, 0xba, 0x64, 0x65, 0xa1, 0x56, 0x42, 0xac,
	0xf3, 0x04, 0x28, 0x33, 0x1e, 0xd7, 0xb1, 0x93, 0x12, 0x8a, 0xd8, 0xc5, 0xf3, 0x7d, 0x67, 0xce,
	0xf9, 0xce, 0x5f, 0x06, 0x94, 0x48, 0x1b, 0x39, 0xb4, 0xa7, 0x99, 0xc8, 0xa3, 0x5a, 0x7f, 0xdb,
	0xe8, 0xb8, 0x6d, 0x63, 0x5b, 0xa3, 0x47, 0xaa, 0xeb, 0x61, 0x8a, 0x61, 0x9e, 0xc3, 0xea, 0x10,
	0x56, 0x05, 0x5c, 0xcc, 0x5b, 0xd8, 0xc2, 0x8c, 0xa0, 0x0d, 0x7f, 0x71, 0x6e, 0xf1, 0xa6, 0x85,
	0xb1, 0xd5, 0x41, 0x1a, 0xfb, 0x6a, 0xf4, 0x5a, 0x9a, 0xe1, 0xf8, 0x02, 0x32, 0x31, 0xe9, 0x62,
	0x72, 0xc0, 0x6d, 0xf8, 0x47, 0x08, 0xc9, 0x63, 0x03, 0x60, 0xfe, 0x18, 0x41, 0xf9, 0x2e, 0x81,
	0xf5, 0x1a, 0xb1, 0xea, 0x1e, 0x76, 0x31, 0x41, 0x7b, 0xc8, 0xa3, 0x76, 0xcb, 0x46, 0x1e, 0xd4,
	0xc0, 0xa2, 0xcb, 0xcf, 0xbc, 0x82, 0x74, 0x5b, 0xda, 0x5c, 0xaa, 0xae, 0x0f, 0x02, 0x79, 0xcd,
	0x37, 0xba, 0x9d, 0x5d, 0x45, 0x20, 0x8a, 0x1e, 0x91, 0xe0, 0x1d, 0x30, 0x67, 0x74, 0x6c, 0x83,
	0x14, 0xb2, 0x8c, 0x9d, 0x1b, 0x04, 0xf2, 0x0a, 0x67, 0xb3, 0x63, 0x45, 0xe7, 0x30, 0xac, 0x80,
	0x25, 0x53, 0x78, 0x29, 0xcc, 0x30, 0x6e, 0x7e, 0x10, 0xc8, 0x39, 0xce, 0x8d, 0x20, 0x45, 0xbf,
	0xa4, 0xc1, 0x47, 0x60, 0xb9, 0x89, 0x88, 0xe9, 0xd9, 0x2e, 0xb5, 0xb1, 0x53, 0x98, 0x65, 0x56,
	0xff, 0x0f, 0x02, 0x19, 0x72, 0xab, 0x18, 0xa8, 0xe8, 0x71, 0xea, 0xee, 0xe2, 0xdb, 0x63, 0x39,
	0xf3, 0xe3, 0x58, 0xce, 0x28, 0x25, 0x70, 0x6b, 0x8c, 0x4e, 0x1d, 0x11, 0x17, 0x3b, 0x04, 0x29,
	0xef, 0x79, 0x1e, 0x38, 0xe0, 0xbf, 0x32, 0x3a, 0x76, 0xd3, 0xa0, 0xd8, 0x1b, 0x0d, 0x57, 0x9a,
	0x2e, 0xdc, 0xe7, 0x60, 0xde, 0xed, 0x35, 0x0e, 0x91, 0xcf, 0x72, 0xb1, 0x5c, 0xc9, 0xab, 0xbc,
	0x76, 0xaa, 0xa8, 0x9d, 0xfa, 0xd4, 0xf1, 0xab, 0x85, 0xd3, 0x93, 0xad, 0x7c, 0x58, 0x2c, 0xd3,
	0xf3, 0x5d, 0x8a, 0xd5, 0x7a, 0xaf, 0xf1, 0x12, 0xf9, 0x7a, 0x68, 0x9d, 0x0a, 0x3e, 0x19, 0x5c,
	0x14, 0xfc, 0x07, 0x09, 0xfc, 0x57, 0x23, 0xd6, 0x33, 0x64, 0x26, 0xc3, 0x67, 0x99, 0x4b, 0x0a,
	0x18, 0xc9, 0x5c, 0x4c, 0x42, 0x9c, 0xfa, 0x17, 0x44, 0xc8, 0xa0, 0x34, 0x36, 0xc8, 0x48, 0xc6,
	0xe7, 0x2c, 0xab, 0xc1, 0x3e, 0x21, 0x3d, 0x51, 0x21, 0xd3, 0xa0, 0x08, 0x3e, 0x06, 0x0b, 0x26,
	0x76, 0x28, 0x72, 0x28, 0x13, 0x30, 0x29, 0x96, 0xe5, 0xd3, 0x93, 0xad, 0x85, 0x3d, 0x4e, 0xd4,
	0x85, 0xc5, 0xb0, 0x91, 0x4d, 0xdc, 0x75, 0xed, 0x0e, 0xf2, 0xc2, 0xd6, 0x8c, 0x35, 0xb2, 0x40,
	0x14, 0x3d, 0x22, 0xc1, 0x27, 0x60, 0xb5, 0xe1, 0x53, 0x64, 0xe2, 0x26, 0x3a, 0x68, 0x1b, 0xa4,
	0x1d, 0x36, 0xe9, 0x8d, 0x41, 0x20, 0xaf, 0x73, 0x2b, 0x01, 0x0f, 0x51, 0x45, 0x5f, 0x11, 0x9f,
	0x2f, 0x0c, 0xd2, 0xbe, 0x7e, 0xab, 0x8e, 0x76, 0xda, 0xdc, 0x54, 0x9d, 0x96, 0xea, 0x90, 0x64,
	0xea, 0xa2, 0xd4, 0x7e, 0x94, 0x40, 0xbe, 0x46, 0x2c, 0x1d, 0xf5, 0xf1, 0xe1, 0x48, 0x6e, 0x1f,
	0x80, 0x05, 0x8f, 0x1d, 0x8a, 0xe6, 0x80, 0x83, 0x40, 0xfe, 0x87, 0xfb, 0x0c, 0x01, 0x45, 0x17,
	0x14, 0x58, 0x02, 0x59, 0xbb, 0xc9, 0xd2, 0x38, 0x5b, 0x5d, 0x1d, 0x04, 0xf2, 0x12, 0x27, 0xda,
	0x4d, 0x45, 0xcf, 0xda, 0xcd, 0xa4, 0xf8, 0x99, 0xeb, 0xcc, 0x69, 0x19, 0x6c, 0x8c, 0x0b, 0x34,
	0x52, 0x12, 0x48, 0x00, 0x5e, 0xce, 0x42, 0xbd, 0x63, 0xd0, 0x16, 0xf6, 0xba, 0xd7, 0x9a, 0xd3,
	0xd7, 0x20, 0xd7, 0x17, 0x4d, 0x78, 0xf0, 0x47, 0xcd, 0xbe, 0x16, 0xdd, 0x53, 0x67, 0xd7, 0xb0,
	0xf5, 0x19, 0x86, 0x16, 0xa6, 0x21, 0xbe, 0x3e, 0x43, 0x64, 0xb8, 0x3e, 0xc3, 0x9f, 0xb1, 0x04,
	0x6c, 0x80, 0x62, 0x5a, 0x9f, 0x90, 0x5f, 0xf9, 0x34, 0x07, 0x66, 0x6a, 0xc4, 0x82, 0x2e, 0xc8,
	0xa5, 0x76, 0xf6, 0x5d, 0x75, 0xdc, 0xff, 0x89, 0x3a, 0x66, 0xed, 0x15, 0xb7, 0xa7, 0xa6, 0x0a,
	0xcf, 0x43, 0x8f, 0xa9, 0xed, 0x38, 0xd9, 0x63, 0x92, 0x7a, 0x85, 0xc7, 0x49, 0x6b, 0x0d, 0xf6,
	0x01, 0x1c, 0xb3, 0xd2, 0xee, 0x4f, 0xbc, 0x28, 0x4d, 0x2e, 0xee, 0xfc, 0x06, 0x39, 0xae, 0x34,
	0xb5, 0x83, 0x26, 0x2b, 0x4d, 0x52, 0xaf, 0x50, 0x3a, 0x69, 0x3c, 0x21, 0x01, 0xff, 0xa6, 0x47,
	0xf3, 0xde, 0xc4, 0x7b, 0x52, 0xdc, 0x62, 0x65, 0x7a, 0x6e, 0xe4, 0xb4, 0x0b, 0xd6, 0x92, 0x53,
	0xb4, 0xf9, 0xab, 0x22, 0x09, 0x66, 0xf1, 0xe1, 0xb4, 0x4c, 0xe1, 0xae, 0xba, 0xff, 0xe5, 0xbc,
	0x2c, 0x9d, 0x9d, 0x97, 0xa5, 0x6f, 0xe7, 0x65, 0xe9, 0xdd, 0x45, 0x39, 0x73, 0x76, 0x51, 0xce,
	0x7c, 0xbd, 0x28, 0x67, 0xde, 0x68, 0x96, 0x4d, 0xdb, 0xbd, 0x86, 0x6a, 0xe2, 0x2e, 0x7b, 0x9a,
	0xd8, 0x87, 0x2d, 0xdc, 0x73, 0x9a, 0xc6, 0x70, 0x33, 0x68, 0xe1, 0x03, 0xe6, 0x88, 0x3f, 0x61,
	0xa8, 0xef, 0x22, 0xd2, 0x98, 0x67, 0x63, 0xb9, 0xf3, 0x33, 0x00, 0x00, 0xff, 0xff, 0x47, 0xa1,
	0x69, 0x3e, 0x5f, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ProposeCertifier(ctx context.Context, in *MsgProposeCertifier, opts ...grpc.CallOption) (*MsgProposeCertifierResponse, error)
	CertifyValidator(ctx context.Context, in *MsgCertifyValidator, opts ...grpc.CallOption) (*MsgCertifyValidatorResponse, error)
	DecertifyValidator(ctx context.Context, in *MsgDecertifyValidator, opts ...grpc.CallOption) (*MsgDecertifyValidatorResponse, error)
	IssueCertificate(ctx context.Context, in *MsgIssueCertificate, opts ...grpc.CallOption) (*MsgIssueCertificateResponse, error)
	RevokeCertificate(ctx context.Context, in *MsgRevokeCertificate, opts ...grpc.CallOption) (*MsgRevokeCertificateResponse, error)
	CertifyPlatform(ctx context.Context, in *MsgCertifyPlatform, opts ...grpc.CallOption) (*MsgCertifyPlatformResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ProposeCertifier(ctx context.Context, in *MsgProposeCertifier, opts ...grpc.CallOption) (*MsgProposeCertifierResponse, error) {
	out := new(MsgProposeCertifierResponse)
	err := c.cc.Invoke(ctx, "/shentu.cert.v1alpha1.Msg/ProposeCertifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CertifyValidator(ctx context.Context, in *MsgCertifyValidator, opts ...grpc.CallOption) (*MsgCertifyValidatorResponse, error) {
	out := new(MsgCertifyValidatorResponse)
	err := c.cc.Invoke(ctx, "/shentu.cert.v1alpha1.Msg/CertifyValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DecertifyValidator(ctx context.Context, in *MsgDecertifyValidator, opts ...grpc.CallOption) (*MsgDecertifyValidatorResponse, error) {
	out := new(MsgDecertifyValidatorResponse)
	err := c.cc.Invoke(ctx, "/shentu.cert.v1alpha1.Msg/DecertifyValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueCertificate(ctx context.Context, in *MsgIssueCertificate, opts ...grpc.CallOption) (*MsgIssueCertificateResponse, error) {
	out := new(MsgIssueCertificateResponse)
	err := c.cc.Invoke(ctx, "/shentu.cert.v1alpha1.Msg/IssueCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeCertificate(ctx context.Context, in *MsgRevokeCertificate, opts ...grpc.CallOption) (*MsgRevokeCertificateResponse, error) {
	out := new(MsgRevokeCertificateResponse)
	err := c.cc.Invoke(ctx, "/shentu.cert.v1alpha1.Msg/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CertifyPlatform(ctx context.Context, in *MsgCertifyPlatform, opts ...grpc.CallOption) (*MsgCertifyPlatformResponse, error) {
	out := new(MsgCertifyPlatformResponse)
	err := c.cc.Invoke(ctx, "/shentu.cert.v1alpha1.Msg/CertifyPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ProposeCertifier(context.Context, *MsgProposeCertifier) (*MsgProposeCertifierResponse, error)
	CertifyValidator(context.Context, *MsgCertifyValidator) (*MsgCertifyValidatorResponse, error)
	DecertifyValidator(context.Context, *MsgDecertifyValidator) (*MsgDecertifyValidatorResponse, error)
	IssueCertificate(context.Context, *MsgIssueCertificate) (*MsgIssueCertificateResponse, error)
	RevokeCertificate(context.Context, *MsgRevokeCertificate) (*MsgRevokeCertificateResponse, error)
	CertifyPlatform(context.Context, *MsgCertifyPlatform) (*MsgCertifyPlatformResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ProposeCertifier(ctx context.Context, req *MsgProposeCertifier) (*MsgProposeCertifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeCertifier not implemented")
}
func (*UnimplementedMsgServer) CertifyValidator(ctx context.Context, req *MsgCertifyValidator) (*MsgCertifyValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertifyValidator not implemented")
}
func (*UnimplementedMsgServer) DecertifyValidator(ctx context.Context, req *MsgDecertifyValidator) (*MsgDecertifyValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecertifyValidator not implemented")
}
func (*UnimplementedMsgServer) IssueCertificate(ctx context.Context, req *MsgIssueCertificate) (*MsgIssueCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCertificate not implemented")
}
func (*UnimplementedMsgServer) RevokeCertificate(ctx context.Context, req *MsgRevokeCertificate) (*MsgRevokeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (*UnimplementedMsgServer) CertifyPlatform(ctx context.Context, req *MsgCertifyPlatform) (*MsgCertifyPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertifyPlatform not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ProposeCertifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeCertifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeCertifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.cert.v1alpha1.Msg/ProposeCertifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeCertifier(ctx, req.(*MsgProposeCertifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CertifyValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCertifyValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CertifyValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.cert.v1alpha1.Msg/CertifyValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CertifyValidator(ctx, req.(*MsgCertifyValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DecertifyValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecertifyValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DecertifyValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.cert.v1alpha1.Msg/DecertifyValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DecertifyValidator(ctx, req.(*MsgDecertifyValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.cert.v1alpha1.Msg/IssueCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueCertificate(ctx, req.(*MsgIssueCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.cert.v1alpha1.Msg/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeCertificate(ctx, req.(*MsgRevokeCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CertifyPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCertifyPlatform)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CertifyPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.cert.v1alpha1.Msg/CertifyPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CertifyPlatform(ctx, req.(*MsgCertifyPlatform))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.cert.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeCertifier",
			Handler:    _Msg_ProposeCertifier_Handler,
		},
		{
			MethodName: "CertifyValidator",
			Handler:    _Msg_CertifyValidator_Handler,
		},
		{
			MethodName: "DecertifyValidator",
			Handler:    _Msg_DecertifyValidator_Handler,
		},
		{
			MethodName: "IssueCertificate",
			Handler:    _Msg_IssueCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _Msg_RevokeCertificate_Handler,
		},
		{
			MethodName: "CertifyPlatform",
			Handler:    _Msg_CertifyPlatform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/cert/v1alpha1/tx.proto",
}

func (m *MsgProposeCertifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeCertifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeCertifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeCertifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeCertifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeCertifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCertifyValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCertifyValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCertifyValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCertifyValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCertifyValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCertifyValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDecertifyValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecertifyValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecertifyValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Decertifier) > 0 {
		i -= len(m.Decertifier)
		copy(dAtA[i:], m.Decertifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Decertifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDecertifyValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecertifyValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecertifyValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIssueCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BytecodeHash) > 0 {
		i -= len(m.BytecodeHash)
		copy(dAtA[i:], m.BytecodeHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BytecodeHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Compiler) > 0 {
		i -= len(m.Compiler)
		copy(dAtA[i:], m.Compiler)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Compiler)))
		i--
		dAtA[i] = 0x12
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Revoker) > 0 {
		i -= len(m.Revoker)
		copy(dAtA[i:], m.Revoker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Revoker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCertifyPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCertifyPlatform) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCertifyPlatform) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidatorPubkey != nil {
		{
			size, err := m.ValidatorPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCertifyPlatformResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCertifyPlatformResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCertifyPlatformResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgProposeCertifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeCertifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCertifyValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCertifyValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDecertifyValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Decertifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDecertifyValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIssueCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Compiler)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BytecodeHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Revoker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCertifyPlatform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValidatorPubkey != nil {
		l = m.ValidatorPubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCertifyPlatformResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgProposeCertifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeCertifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeCertifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeCertifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeCertifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeCertifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCertifyValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCertifyValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCertifyValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCertifyValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCertifyValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCertifyValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecertifyValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecertifyValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecertifyValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decertifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decertifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecertifyValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecertifyValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecertifyValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compiler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compiler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytecodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytecodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revoker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCertifyPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCertifyPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCertifyPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorPubkey == nil {
				m.ValidatorPubkey = &types.Any{}
			}
			if err := m.ValidatorPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCertifyPlatformResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCertifyPlatformResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCertifyPlatformResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
